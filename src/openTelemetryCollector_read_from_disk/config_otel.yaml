receivers:
  otlpjsonfile/traces:
    include:
      - "/var/log/otel_input/*traces*.json"
  otlpjsonfile/metrics:
    include:
      - "/var/log/otel_input/*metrics*.json"
  otlpjsonfile/logs:
    include:
      - "/var/log/otel_input/*logs*.json"

processors:
  batch:
  memory_limiter:
    # 75% of maximum memory up to 2G
    limit_mib: 1536
    # 25% of limit up to 2G
    spike_limit_mib: 512
    check_interval: 5s


exporters:
  # Data sources: traces, metrics, logs
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
  prometheus:
    endpoint: "0.0.0.0:8889"
    send_timestamps: false # true would send the actual timestamps, prometheus cannot deal with that if the timestamps are too far in the past. Which is basically always the case in the scenario we are in here
    resource_to_telemetry_conversion:
      enabled: true
  otlp/elastic: 
    endpoint: "${ELASTIC_APM_SERVER_ENDPOINT}"
    tls:
      insecure: true
    headers:
      Authorization: "Bearer ${ELASTIC_APM_SECRET_TOKEN}"  
  debug:
    verbosity: detailed


service:
  pipelines:
    traces:
      receivers: [otlpjsonfile/traces]
      processors: [memory_limiter, batch]
      exporters: [otlp/jaeger, otlp/elastic]
    metrics:
      receivers: [otlpjsonfile/metrics]
      processors: [memory_limiter, batch]
      exporters: [prometheus, otlp/elastic]
    logs: 
      receivers: [otlpjsonfile/logs]
      processors: [memory_limiter, batch]
      exporters: [otlp/elastic]
  telemetry:
    logs:
      level: DEBUG

